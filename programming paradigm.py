'''
프로그램의 패러다임(programming paradigm)
프로그래밍 패러다임은 소프트웨어를 어떻게 개발할지에 대한 생각의 틀 또는 접근 방식을 의미합니다. 
프로그래밍의 패러다임 크게 명령형(Imperative)과 선언형(Declarative)으로 나눌 수 있습니다.
'''

'''
명령형(Imperative) 특징
- 무엇을 할지(What)보다 어떻게 할지(How)에 초점을 맞춥니다.
- 개발자가 컴퓨터에게 단계별로 명령을 내리며, 프로그램의 상태 변화와 실행 흐름을 직접 제어합니다.
- 대표적인 예시: C, Java, Python(명령형 스타일)

하위 패러다임
1. 절차형 프로그래밍
프로그래밍을 함수또는 절차단위로 쪼개어 순서대로 실행합니다
예) C언어

2. 객체 지향 프로그래밍
프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들간의 유기적인 상호작용을 통해 로직을 구상하는 방법이다.
예) Java, C++
'''

'''
선언형 (Declarative) 특징
- 어떻게(How) 할지보다 무엇(What)을 할지에 초점을 둔다
- 개발자는 원하는 결과만 선언하고, 구체적인 처리방법은 컴퓨터가 알아서한다.
- 대표적인 예시: SQL, HTML, 함수형 언어, 등등

하위 패러다임
1. 함수형 프로그래밍
순수 함수와 함수의 조합을 중심으로 소프트웨어를 구성합니다.
상태변화와 외부의 영향을 최대한 안받으려고하며 코드의 예측 가능성과 코드의 재사용성을 높인다.
예) Java script, Haskell, 등등

순수함수란 동일한 입력에대해 항상 같은 출력을 반환하고 외부의 상태를 바꾸지도, 의존하지도 않는다.

2. 논리형 프로그래밍
논리적 규칙을 선언하여 문제를 해결합니다
예) Prolog 

논리적 규칙이란, a는 b이면서 참일때 불러오는 모든값들
'''
