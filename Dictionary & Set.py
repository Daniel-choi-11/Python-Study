# =============================================================================
# 📚 Dictionary와 Set - Python 자료구조
# =============================================================================

# -----------------------------------------------------------------------------
# 🗂️ Dictionary {} 
# Dictionary는 키-값 (key-value) 쌍으로 저장하는 자료구조입니다. 
# {}로 정의되며, 콜론으로 구분합니다
# -----------------------------------------------------------------------------

# Dictionary 생성
j = {
    "name": "최정",
    "age": 13,
    "gender": "male"
}
print(j)  # {'name': '최정', 'age': 13, 'gender': 'male'}

# 🔍 값 접근하기 []
# 키를 사용하여 해당하는 값에 접근
name = j["name"]
print(name)  # 최정

# ➕ 값 추가 및 수정하기
# 새로운 키-값 쌍 추가
j["grade"] = 8
s = j["grade"]
print(s)  # 8

# 기존 값 수정
j["age"] = 11
print(j)  # {'name': '최정', 'age': 11, 'gender': 'male', 'grade': 8}

# ❌ 값 제거하기 (del)
# del 키워드를 사용하여 특정 키-값 쌍 제거
del j["age"]
print(j)  # {'name': '최정', 'gender': 'male', 'grade': 8}

# 🔄 모든 키와 값 돌아가며 출력하기 (items())
# for문과 items() 메소드를 사용하여 모든 키-값 쌍 순회
for key, value in j.items():
    print(f"{key}: {value}")
# name: 최정
# gender: male  
# grade: 8

# 🔑 모든 키 가져오기 (keys())
# keys() 메소드로 딕셔너리의 모든 키를 가져옴
a = j.keys()
print(a)  # dict_keys(['name', 'gender', 'grade'])

# -----------------------------------------------------------------------------
# 🎯 집합 (Set)
# 집합은 중복되지 않는 고유한 값들을 저장하는 자료구조입니다. 
# {}로 정의되며, 순서가 보장되지 않습니다
# -----------------------------------------------------------------------------

# Set 생성
numbers2 = {1, 2, 3, 4, 5}
print(numbers2)  # {1, 2, 3, 4, 5}

# ➕ 항목 추가하기 (add())
# 새로운 값 추가
numbers2.add(6)
numbers2.add(3)  # 이미 존재하는 값은 추가되지 않습니다
print(numbers2)  # {1, 2, 3, 4, 5, 6}

# ❌ 항목 제거하기 (remove())
# 특정 값 제거
numbers2.remove(3)
print(numbers2)  # {1, 2, 4, 5, 6}

#집합연산 (합집합, 차집합, 교집합)
#1. 합집합 (union())
#합집합은 모든집합들을 더한집합이다.

#2. 차집합(difference())
#첫집합에는 있지만, 두번째에는 없는 항목만 포함한 집합이다

#3. 교집합(intersection())
#두 집합이 만나는곳만 포함한 집합이다.

m={1,2,3,4,5,6}
n={4,5,6,7,8,9}
print(m.union(n))
print(m.difference(n))
print(m.intersection(n))

#4. 부분집합 (issubset())
# a와 b가 있을 때, a 값이 b의 값 안에 모두 포함되어 있다면 a는 b의 부분집합이라 부른다.
print(m.issubset(n))

#5. 상위집합 (issuperset())
# a와 b가 있을 때, a 값이 b의 값 안에 모두 포함되어 있다면 b는 a의 상위집합이라 부른다.
print(m.issuperset(n))

#dictionary와 set의 차이점
#dictionary는 key와 value로 이루어져있다. set은 구조가 고유한 값들의 모음.
#dictionary는 구조화된 데이터를 사용하고, set은 중복제거와 연산을 사용한다.

grades = {
    "Hiwoo": {"수학": 85, "영어": 90, "과학": 80},
    "Jang": {"수학": 92, "영어": 88, "과학": 89},
    "Greg": {"수학": 100, "영어": 100, "과학": 100}
}

